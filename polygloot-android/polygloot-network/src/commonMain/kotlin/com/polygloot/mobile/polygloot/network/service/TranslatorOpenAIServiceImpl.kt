package com.polygloot.mobile.polygloot.network.service

import com.polygloot.mobile.polygloot.network.NetworkClient
import com.polygloot.mobile.polygloot.network.dto.ChatCompletionDTO
import com.polygloot.mobile.polygloot.network.dto.ChatCompletionRequestDTO
import com.polygloot.mobile.polygloot.network.dto.InputAudio
import com.polygloot.mobile.polygloot.network.dto.MessageInputAdvance
import com.polygloot.mobile.polygloot.network.dto.MessageInputSimple
import com.polygloot.mobile.polygloot.network.dto.SpeechToTextDTO
import com.polygloot.mobile.polygloot.network.dto.UserContent
import io.ktor.client.call.body
import io.ktor.client.statement.HttpResponse
import io.ktor.http.isSuccess
import java.io.File

class TranslatorOpenAIServiceImpl(private val networkClient: NetworkClient) :
    TranslatorOpenAIService {

    override suspend fun detectLanguage(inputText: String): TranslatorNetworkResponse<String, String> =
        networkClient.detectLanguage(inputText).handleResponse()

    override suspend fun translateText(
        inputText: String,
        sourceLanguage: String,
        targetLanguage: String
    ): TranslatorNetworkResponse<String, String> =
        networkClient.translateText(inputText, sourceLanguage, targetLanguage).handleResponse()

    override suspend fun translateTextAndTTS(
        inputText: String,
        sourceLanguage: String,
        targetLanguage: String
    ): TranslatorNetworkResponse<ChatCompletionDTO, String> =
        networkClient.translateTextAndTextToSpeech(inputText, sourceLanguage, targetLanguage).handleResponse()

    override suspend fun translateAudioAndTTS(
        base64audio: String,
        sourceLanguage: String,
        targetLanguage: String
    ): TranslatorNetworkResponse<ChatCompletionDTO, String> {
        /*
        val testAudio = ""
        Log.e("Audio", "TEST: $testAudio")
        val chunkSize = 1000 // Adjust the chunk size as needed
        val base64audioChunks = "$base64audio==".chunked(chunkSize)
        base64audioChunks.forEachIndexed { index, chunk ->
            Log.e("Audio", "RECORDED PART $index: $chunk")
        }
        */
        val bodyRequestDTO = ChatCompletionRequestDTO(
            messages = listOf(
                MessageInputSimple(
                    role = "system",
                    content = "You are a helpful translator, you are given an input text in $sourceLanguage, translate it to $targetLanguage"
                ),
                MessageInputAdvance(
                    role = "user",
                    content = listOf(
                        UserContent("input_audio", InputAudio(data = base64audio, format = "mp3"))
                    )
                )
            )
        )
        return networkClient.translateAudioAndTextToSpeech(bodyRequestDTO).handleResponse()
    }

    override suspend fun detectLanguageAndTranslate(
        inputText: String,
        targetLanguage: String
    ): TranslatorNetworkResponse<String, String> =
        networkClient.detectLanguageAndTranslate(inputText, targetLanguage).handleResponse()

    override suspend fun textToSpeech(inputText: String): TranslatorNetworkResponse<File, String> =
        networkClient.textToSpeech(inputText).handleResponse()

    override suspend fun speechToText(filePath: String): TranslatorNetworkResponse<SpeechToTextDTO, String> =
        networkClient.speechToText(filePath).handleResponse()

    private suspend inline fun <reified T : Any> HttpResponse.handleResponse(customBody: T? = null): TranslatorNetworkResponse<T, String> {
        return if (this.status.isSuccess()) {
            TranslatorNetworkResponse.Success(customBody ?: this.body())
        } else {
            this.handleErrorResponse()
        }
    }
}